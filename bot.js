require('dotenv').config({ path: '../.env' });
const TelegramBot = require('node-telegram-bot-api');
const { Client } = require('pg');
const token = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// Add WebSocket client
const WebSocket = require('ws');
const wsUrl = process.env.WS_URL || 'ws://localhost:3000'; // Should come from config
const wsClient = new WebSocket(wsUrl);

wsClient.on('open', function open() {
  console.log('WebSocket client connected to server');
});

wsClient.on('message', function message(data) {
  console.log(`Received message from server: ${data}`);
  // TODO: Handle messages received from the server via WebSocket
  // e.g., notifications about new messages from mini-app users
});

wsClient.on('error', function error(err) {
  console.error('WebSocket client error:', err);
});

wsClient.on('close', function close(code, reason) {
  console.log('WebSocket client disconnected:', code, reason ? reason.toString() : '');
  // TODO: Implement reconnection logic if necessary
});

const db = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: false // –æ—Ç–∫–ª—é—á–∞–µ–º SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  });
db.connect();

const userStates = new Map();
const activeChats = new Map();

// --- interests list for inline keyboard ---
const INTERESTS = [
  { emoji: '‚öΩ', name: '—Å–ø–æ—Ä—Ç' },
  { emoji: 'üìö', name: '–∫–Ω–∏–≥–∏' },
  { emoji: 'üéÆ', name: '–∏–≥—Ä—ã' },
  { emoji: 'üíª', name: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { emoji: 'üç≥', name: '–∫—É–ª–∏–Ω–∞—Ä–∏—è' },
  { emoji: 'üéµ', name: '–º—É–∑—ã–∫–∞' },
  { emoji: 'üé®', name: '–∏—Å–∫—É—Å—Å—Ç–≤–æ' },
  { emoji: 'üê∂', name: '–∂–∏–≤–æ—Ç–Ω—ã–µ' },
  { emoji: 'üé•', name: '—Ñ–∏–ª—å–º—ã' },
  { emoji: '‚úàÔ∏è', name: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' }
];

function getUserId(telegramId) {
  return db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId])
    .then(res => res.rows[0]?.id)
    .catch(err => {
      console.error('Error in getUserId:', err);
      return null;
    });
}

async function updateLastSeen(tgId) {
  try {
    await db.query(`UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE telegram_id = $1`, [tgId]);
  } catch (err) {
    console.error('Error updating last_seen:', err);
  }
}

// /start
bot.onText(/\/start/, async (msg) => {
  await updateLastSeen(msg.from.id);
  try {
    const id = msg.from.id;
    const name = msg.from.first_name;
    await db.query(
      'INSERT INTO users (telegram_id, name) VALUES ($1, $2) ON CONFLICT (telegram_id) DO UPDATE SET name = $2',
      [id, name]
    );
    bot.sendMessage(id, `–ü—Ä–∏–≤–µ—Ç, ${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Peone ‚Äî —Å–æ—Å–µ–¥—Å–∫–∏–π —á–∞—Ç üè°`);
  } catch (err) {
    console.error('Error in /start:', err);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// /profile
bot.onText(/\/profile/, async (msg) => {
  await updateLastSeen(msg.from.id);
  try {
    const id = msg.from.id;
    const res = await db.query('SELECT name, bio, interests FROM users WHERE telegram_id = $1', [id]);
    const u = res.rows[0];
    if (!u) return bot.sendMessage(id, '–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.');
    const bio = u.bio || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const interests = u.interests?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    bot.sendMessage(id, `üë§ –ò–º—è: ${u.name}\nüìù –û —Å–µ–±–µ: ${bio}\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${interests}`);
  } catch (err) {
    console.error('Error in /profile:', err);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
  }
});

// /location
bot.onText(/\/location/, async (msg) => {
  await updateLastSeen(msg.from.id);
  bot.sendMessage(msg.chat.id, 'üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:', {
    reply_markup: {
      keyboard: [[{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true }]],
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });
});

// /chats
bot.onText(/\/chats/, async (msg) => {
  await updateLastSeen(msg.from.id);
  try {
    const chatId = msg.chat.id;
    const myTgId = msg.from.id;
    const myId = await getUserId(myTgId);
    if (!myId) return bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const res = await db.query(`
      SELECT 
        CASE WHEN user1_id = $1 THEN u2.name ELSE u1.name END AS name,
        CASE WHEN user1_id = $1 THEN u2.telegram_id ELSE u1.telegram_id END AS telegram_id
      FROM conversations
      JOIN users u1 ON user1_id = u1.id
      JOIN users u2 ON user2_id = u2.id
      WHERE user1_id = $1 OR user2_id = $1
    `, [myId]);
    if (res.rows.length === 0) return bot.sendMessage(chatId, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.');
    res.rows.forEach(row => {
      bot.sendMessage(chatId, `üë§ ${row.name}`, {
        reply_markup: {
          inline_keyboard: [[{ text: 'üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', callback_data: `chat_${row.telegram_id}` }]]
        }
      });
    });
  } catch (err) {
    console.error('Error in /chats:', err);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
async function findOrCreateConversation(user1TgId, user2TgId) {
  try {
    const user1Id = await getUserId(user1TgId);
    const user2Id = await getUserId(user2TgId);
    if (!user1Id || !user2Id) return null; // –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    const result = await db.query(`
      SELECT id FROM conversations
      WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)
      LIMIT 1
    `, [user1Id, user2Id]);

    if (result.rows.length > 0) {
      return result.rows[0].id; // –ë–µ—Å–µ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞
    } else {
      // –ë–µ—Å–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      const insert = await db.query(`
        INSERT INTO conversations (user1_id, user2_id)
        VALUES ($1, $2) RETURNING id
      `, [user1Id, user2Id]);
      return insert.rows[0].id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã
    }
  } catch (err) {
    console.error('Error in findOrCreateConversation:', err);
    return null; // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î
  }
}

// /chat <telegram_id>
bot.onText(/\/chat (\d+)/, async (msg, match) => {
  await updateLastSeen(msg.from.id);
  try {
    const fromTgId = msg.from.id;
    const toTgId = parseInt(match[1]);
    if (fromTgId === toTgId) return bot.sendMessage(fromTgId, '–≠—Ç–æ —Ç—ã —Å–∞–º üòÖ');

    const conversationId = await findOrCreateConversation(fromTgId, toTgId);

    if (conversationId) {
      activeChats.set(fromTgId, toTgId);
      activeChats.set(toTgId, fromTgId);
      bot.sendMessage(fromTgId, 'üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: (–≤—ã–π—Ç–∏ - /end)');
      bot.sendMessage(toTgId, 'üí¨ –ö—Ç–æ-—Ç–æ –Ω–∞—á–∞–ª —Å —Ç–æ–±–æ–π —á–∞—Ç! –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /end');
    } else {
      bot.sendMessage(fromTgId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  } catch (err) {
    console.error('Error in /chat:', err);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç.');
  }
});

// /end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç
bot.onText(/\/end/, async (msg) => {
  await updateLastSeen(msg.from.id);
  const id = msg.from.id;
  const peer = activeChats.get(id);
  if (peer) {
    activeChats.delete(id);
    activeChats.delete(peer);
    bot.sendMessage(id, 'üö™ –¢—ã –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.');
    bot.sendMessage(peer, 'üö™ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.');
  } else {
    bot.sendMessage(id, '–¢—ã –Ω–µ –≤ —á–∞—Ç–µ.');
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
bot.on('location', async (msg) => {
  await updateLastSeen(msg.from.id);
  const { latitude, longitude } = msg.location;
  await db.query('UPDATE users SET latitude = $1, longitude = $2 WHERE telegram_id = $3', [latitude, longitude, msg.from.id]);
  bot.sendMessage(msg.chat.id, 'üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
  sendSetupMenu(msg.from.id);
});

// /like <telegram_id> - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
bot.onText(/\/like (\d+)/, async (msg, match) => {
  await updateLastSeen(msg.from.id);
  const fromTgId = msg.from.id;
  const toTgId = parseInt(match[1]);

  if (fromTgId === toTgId) {
    return bot.sendMessage(fromTgId, '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòÖ');
  }

  try {
    const fromId = await getUserId(fromTgId);
    const toId = await getUserId(toTgId);

    if (!fromId || !toId) {
      return bot.sendMessage(fromTgId, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É
    const existingLike = await db.query(
      'SELECT id FROM likes WHERE liker_id = $1 AND liked_id = $2',
      [fromId, toId]
    );

    if (existingLike.rows.length > 0) {
      return bot.sendMessage(fromTgId, '–¢—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
    await db.query(
      'INSERT INTO likes (liker_id, liked_id) VALUES ($1, $2)',
      [fromId, toId]
    );
    bot.sendMessage(fromTgId, `‚úÖ –¢—ã –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID ${toTgId}`);

    // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–≥–æ, –∫–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    // –í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–¥–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

  } catch (err) {
    console.error('Error in /like:', err);
    bot.sendMessage(fromTgId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫.');
  }
});

// /likes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ —Ç–µ–±—è –ª–∞–π–∫–Ω—É–ª
bot.onText(/\/likes/, async (msg) => {
  await updateLastSeen(msg.from.id);
  const myTgId = msg.from.id;

  try {
    const myId = await getUserId(myTgId);
    if (!myId) {
      return bot.sendMessage(myTgId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –º–µ–Ω—è
    const likedBy = await db.query(
      'SELECT u.telegram_id, u.name FROM likes JOIN users u ON liker_id = u.id WHERE liked_id = $1',
      [myId]
    );

    if (likedBy.rows.length === 0) {
      return bot.sendMessage(myTgId, '–¢–µ–±—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª üò•');
    }

    const names = likedBy.rows.map(row => `${row.name} (ID: ${row.telegram_id})`).join('\n');
    bot.sendMessage(myTgId, `–¢–µ–±—è –ª–∞–π–∫–Ω—É–ª–∏:\n${names}`);

  } catch (err) {
    console.error('Error in /likes:', err);
    bot.sendMessage(myTgId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
bot.on('message', async (msg) => {
  await updateLastSeen(msg.from.id);
  const userId = msg.from.id;
  const state = userStates.get(userId);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –±–∏–æ
  if (state === 'waiting_for_bio') {
    try {
      await db.query('UPDATE users SET bio = $1 WHERE telegram_id = $2', [msg.text, userId]);
      bot.sendMessage(msg.chat.id, 'üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      userStates.delete(userId);
      sendSetupMenu(userId);
    } catch (err) {
      console.error('Error updating bio:', err);
      bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏.');
      userStates.delete(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    return;
  }

  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  const peerId = activeChats.get(userId);
  if (peerId) {
    try {
      bot.sendMessage(peerId, `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Å–µ–¥–∞:\n${msg.text}`);
      const senderDbId = await getUserId(userId);
      const receiverDbId = await getUserId(peerId);
      // –ù–∞—Ö–æ–¥–∏–º –±–µ—Å–µ–¥—É (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å activeChats)
      const conv = await db.query(
        `SELECT id FROM conversations WHERE (user1_id=$1 AND user2_id=$2) OR (user1_id=$2 AND user2_id=$1) LIMIT 1`,
        [senderDbId, receiverDbId]
      );
      if (conv.rows.length) {
        await db.query('INSERT INTO messages (conversation_id, sender_id, content) VALUES ($1, $2, $3)', [
          conv.rows[0].id, senderDbId, msg.text
        ]);
        // –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ.
        // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–æ–¥—Ö–æ–¥ - –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ WS –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—É
        // —Ä–µ—à–∏—Ç—å, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å (–±–æ—Ç—É –∏–ª–∏ WS).
        if (wsClient.readyState === WebSocket.OPEN) {
          const messageData = {
            type: 'message',
            conversationId: conv.rows[0].id,
            senderId: senderDbId, // This is DB ID, not Telegram ID
            content: msg.text,
            timestamp: new Date().toISOString()
          };
          wsClient.send(JSON.stringify(messageData));
          console.log('Message sent via WebSocket to server', messageData);
        } else {
          console.warn('WebSocket client is not open. Message not sent via WS.');
          // Fallback to sending via bot (already done above)
        }
      } else {
        // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ activeChats –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        console.error(`Active chat with ${peerId} exists for user ${userId}, but no conversation found in DB.`);
        bot.sendMessage(userId, '–û—à–∏–±–∫–∞ —á–∞—Ç–∞: –±–µ—Å–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        activeChats.delete(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
      }
    } catch (err) {
      console.error('Error sending message in active chat:', err);
      bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }
});

bot.onText(/\/app/, async (msg) => {
  await updateLastSeen(msg.from.id);
    bot.sendMessage(msg.chat.id, 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Peone Mini App:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: "üë• –°–æ—Å–µ–¥–∏ —Ä—è–¥–æ–º",
            web_app: { url: "https://scintillating-sorbet-ac494e.netlify.app" }
          }
        ]]
      }
    });
  });

// /setup ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.onText(/\/setup/, async (msg) => {
  await updateLastSeen(msg.from.id);
  const id = msg.from.id;
  await db.query(
    'INSERT INTO users (telegram_id, name) VALUES ($1, $2) ON CONFLICT (telegram_id) DO UPDATE SET name = $2',
    [id, msg.from.first_name]
  );
  sendSetupMenu(id);
});

async function sendSetupMenu(id) {
  const res = await db.query('SELECT name, bio, interests, latitude, longitude FROM users WHERE telegram_id = $1', [id]);
  const u = res.rows[0] || {};
  const bio = u.bio || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  const interests = (u.interests || []).join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
  const loc = (u.latitude && u.longitude) ? `üìç ${u.latitude.toFixed(4)}, ${u.longitude.toFixed(4)}` : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  let text = `üë§ –ò–º—è: ${u.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüìù –û —Å–µ–±–µ: ${bio}\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${interests}\n${loc}`;
  bot.sendMessage(id, '–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n' + text, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data: 'set_location' }],
        [{ text: 'üéØ –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data: 'set_interests' }],
        [{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∏–æ', callback_data: 'set_bio' }],
        [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'setup_done' }]
      ]
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è /setup –∏ —á–∞—Ç–æ–≤
bot.on('callback_query', async (query) => {
  await updateLastSeen(query.from.id);
  const id = query.from.id;
  const data = query.data;
  const chatId = query.message.chat.id; // –î–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ

  try {
    if (data === 'set_location') {
      bot.sendMessage(id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:', {
        reply_markup: {
          keyboard: [[{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true }]],
          one_time_keyboard: true
        }
      });
    } else if (data === 'set_interests') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
      const user = await db.query('SELECT interests FROM users WHERE telegram_id = $1', [id]);
      const selected = user.rows[0]?.interests || [];
      const keyboard = INTERESTS.map(i => [{
        text: `${selected.includes(i.name) ? '‚úÖ ' : ''}${i.emoji} ${i.name}`,
        callback_data: `interest_${i.name}`
      }]);
      keyboard.push([{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'interests_done' }]);
      bot.sendMessage(id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):', {
        reply_markup: { inline_keyboard: keyboard }
      });
    } else if (data === 'set_bio') {
      userStates.set(id, 'waiting_for_bio');
      bot.sendMessage(id, '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ:');
    } else if (data === 'setup_done') {
      await sendSetupMenu(id);
      bot.sendMessage(id, '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ú–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —Å–Ω–æ–≤–∞ /setup.');
    } else if (data === 'interests_done') {
      await sendSetupMenu(id);
      bot.sendMessage(id, 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } else if (data.startsWith('interest_')) {
      const interest = data.split('_')[1];
      const user = await db.query('SELECT interests FROM users WHERE telegram_id = $1', [id]);
      const current = user.rows[0]?.interests || [];
      const updated = current.includes(interest)
        ? current.filter(i => i !== interest)
        : [...current, interest];
      await db.query('UPDATE users SET interests = $1 WHERE telegram_id = $2', [updated, id]);
      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏
      const keyboard = INTERESTS.map(i => [{
        text: `${updated.includes(i.name) ? '‚úÖ ' : ''}${i.emoji} ${i.name}`,
        callback_data: `interest_${i.name}`
      }]);
      keyboard.push([{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'interests_done' }]);
      bot.editMessageReplyMarkup({ inline_keyboard: keyboard }, { chat_id: id, message_id: query.message.message_id });
      bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!' });
    } else if (data.startsWith('chat_')) { // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
      const peerTgId = parseInt(data.split('_')[1]);
      if (isNaN(peerTgId)) {
         bot.answerCallbackQuery(query.id, { text: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.' });
         return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ /chat
      const fromTgId = id; // –¢–æ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
      if (fromTgId === peerTgId) {
         bot.answerCallbackQuery(query.id, { text: '–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.' });
         return;
      }

      const conversationId = await findOrCreateConversation(fromTgId, peerTgId);

      if (conversationId) {
        activeChats.set(fromTgId, peerTgId);
        activeChats.set(peerTgId, fromTgId);
        bot.sendMessage(fromTgId, 'üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: (–≤—ã–π—Ç–∏ - /end)');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        if (!activeChats.has(peerTgId) || activeChats.get(peerTgId) !== fromTgId) {
           bot.sendMessage(peerTgId, 'üí¨ –ö—Ç–æ-—Ç–æ –Ω–∞—á–∞–ª —Å —Ç–æ–±–æ–π —á–∞—Ç! –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /end');
        }
        bot.answerCallbackQuery(query.id, { text: '–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç!' });
      } else {
        bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —á–∞—Ç.' });
      }
    }
    // –î–æ–±–∞–≤–ª—è–µ–º answerCallbackQuery –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    bot.answerCallbackQuery(query.id);

  } catch (err) {
    console.error('Error in callback_query handler:', err);
    bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' });
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
});
  